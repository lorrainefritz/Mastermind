<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BookmarkManager">
    <bookmark url="file://$PROJECT_DIR$/src/main/java/MastermindGame.java" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="10e16e47-6e15-4103-af2c-aad5e34ac9ad" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/src/main/java/GameManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/GameManager.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/GameMode.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/GameMode.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/MastermindGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/MastermindGame.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/MoreOrLessGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/MoreOrLessGame.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/SolverHelper.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/SolverHelper.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/resources/config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/resources/config.properties" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <ignored path="$PROJECT_DIR$/target/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FavoritesManager">
    <favorites_list name="Mastermind" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/main/java/resources/config.properties">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="119">
              <caret line="7" column="11" selection-start-line="7" selection-start-column="11" selection-end-line="7" selection-end-column="11" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/main/java/MastermindGame.java">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="221">
              <caret line="184" column="60" selection-start-line="184" selection-start-column="60" selection-end-line="184" selection-end-column="60" />
              <folding>
                <element signature="imports" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/main/java/GameMode.java">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="127">
              <caret line="207" column="20" selection-start-line="207" selection-start-column="20" selection-end-line="207" selection-end-column="20" />
              <folding>
                <element signature="imports" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/main/java/GameManager.java">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="306">
              <caret line="30" column="93" lean-forward="true" selection-start-line="30" selection-start-column="93" selection-end-line="30" selection-end-column="93" />
              <folding>
                <element signature="imports" expanded="true" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/main/java/SolverHelper.java">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="238">
              <caret line="14" column="46" selection-start-line="14" selection-start-column="46" selection-end-line="14" selection-end-column="46" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
        <option value="FxmlFile" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>thr</find>
      <find>len</find>
      <find>pre</find>
      <find>return r</find>
      <find>processGuess</find>
      <find>computerTabLength</find>
      <find>eva</find>
      <find>user</find>
      <find>defender</find>
      <find>rand</find>
      <find>random</find>
      <find>sec</find>
      <find>mm</find>
      <find>dd</find>
      <find>info</find>
      <find>ra</find>
      <find>parse</find>
      <find>combinationNumberOfNumbers()</find>
      <find>roun</find>
      <find>la combinaison s</find>
      <find>Syste</find>
      <find>System.out</find>
      <find>propo</find>
      <find>proposition</find>
      <find>voil</find>
      <find>|</find>
      <find>propos</find>
      <find>BP</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Lorraine" />
      </list>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/GameManager.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/UserCombination.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/Game.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/RandomCombination.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/Main.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/MoreOrLessGame.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/GameManager.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/MastermindGame.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/GameMode.java" />
        <option value="$PROJECT_DIR$/ressources/config.properties" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/GameProperties.java" />
        <option value="$PROJECT_DIR$/src/com/Mastermind/GameGetPropertyValues.java" />
        <option value="$PROJECT_DIR$/src/main/java/ResultatMastermindDefender.java" />
        <option value="$PROJECT_DIR$/src/main/java/TryMastermindDefender.java" />
        <option value="$PROJECT_DIR$/pom.xml" />
        <option value="$PROJECT_DIR$/src/main/java/mastermind/Main.java" />
        <option value="$PROJECT_DIR$/src/main/java/SolverHelperMastermind.java" />
        <option value="$PROJECT_DIR$/src/main/java/ListOfListOfSolutionsMastermind.java" />
        <option value="$PROJECT_DIR$/src/main/java/ListOfSolutionsMastermind.java" />
        <option value="$PROJECT_DIR$/src/main/java/ResultMastermindDefender.java" />
        <option value="$PROJECT_DIR$/apache-log4j-2.11.2-src/log4j-core/src/test/resources/LOG4J2-1100/log4j2.xml" />
        <option value="$PROJECT_DIR$/src/main/ressources/log4j.xml" />
        <option value="$PROJECT_DIR$/src/main/ressources/log4j2.xml" />
        <option value="$PROJECT_DIR$/src/main/ressources/config.properties" />
        <option value="$PROJECT_DIR$/src/main/java/GameProperties.java" />
        <option value="$PROJECT_DIR$/src/main/java/GameGetPropertyValues.java" />
        <option value="$PROJECT_DIR$/src/main/java/resources/log4j2.xml" />
        <option value="$PROJECT_DIR$/src/main/java/Main.java" />
        <option value="$PROJECT_DIR$/src/main/java/SolverHelper.java" />
        <option value="$PROJECT_DIR$/src/main/java/resources/config.properties" />
        <option value="$PROJECT_DIR$/src/main/java/MoreOrLessGame.java" />
        <option value="$PROJECT_DIR$/src/main/java/GameManager.java" />
        <option value="$PROJECT_DIR$/src/main/java/GameMode.java" />
        <option value="$PROJECT_DIR$/src/main/java/MastermindGame.java" />
      </list>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="importAutomatically" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="MavenProjectNavigator">
    <treeState>
      <expand />
      <select />
    </treeState>
  </component>
  <component name="ProjectFrameBounds" extendedState="7">
    <option name="x" value="-226" />
    <option name="y" value="22" />
    <option name="width" value="1696" />
    <option name="height" value="1026" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="Mastermind" type="b2602c69:ProjectViewProjectNode" />
              <item name="Mastermind" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Mastermind" type="b2602c69:ProjectViewProjectNode" />
              <item name="Mastermind" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Mastermind" type="b2602c69:ProjectViewProjectNode" />
              <item name="Mastermind" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="java" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Mastermind" type="b2602c69:ProjectViewProjectNode" />
              <item name="Mastermind" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="java" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="Mastermind" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1553793857600" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/src/apache-log4j-2" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="project.propCompiler" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\aehline\Documents\OpenC\Mastermind\src\main\java\resources" />
      <recent name="C:\Users\aehline\Documents\OpenC\Mastermind\src\main\java\mastermind" />
      <recent name="C:\Users\aehline\Documents\OpenC\Mastermind\src\main" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\aehline\Documents\OpenC\Mastermind\src" />
    </key>
    <key name="CreateClassDialog.RecentsKey">
      <recent name="com.Mastermind" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="main.java.Main" />
      <module name="Mastermind" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="main.java.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="10e16e47-6e15-4103-af2c-aad5e34ac9ad" name="Default Changelist" comment="" />
      <created>1541669609289</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1541669609289</updated>
    </task>
    <task id="LOCAL-00001" summary="Création du projet &#10;+ Ajout au des deux schéma dont une représentation UML">
      <created>1541756681204</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1541756681205</updated>
    </task>
    <task id="LOCAL-00002" summary="Mise à jour du diagramme UML + création des différentes classes + ajout de l'héritage">
      <created>1542294101682</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1542294101682</updated>
    </task>
    <task id="LOCAL-00003" summary="correction d'un souci de localisation de la classe GameManager">
      <created>1542294239248</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1542294239248</updated>
    </task>
    <task id="LOCAL-00004" summary="ETAT DU PROGRAMME : choix de jeu disponible mais seul le jeu du Plus ou Moins en Mode challenger fonctionne, &#10;une combinaison aléatoire est générée et comparée à la combinaison de l'utilisateur en un certain nb d'essais. Cependant ne fonctionne qu'en cas réponses dans les &quot;clous&quot; (Exceptions pour les chiffres aberants et lettres pas toujours gérées). De plus pour le moment le programme continue malgrés une bonne réponse de l'utilisateur : nombre de fois = nombre d'essais fixés par l'utilisateur.    &#10;&#10;GameManager : &#10;ajout des méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(),&#10;   public void runGame,&#10;ajout d'attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;=&gt; toutes ses méthodes ont un contenu&#10;&#10;GameMode&#10;ajout d'un constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) : avec contenu&#10;ajout des méthodes : &#10;   public GameMode challenger() : vide&#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() : avec contenu&#10;   public void numberOfTriesGestion() : avec contenu&#10;   public void tipsGestion() : vide&#10;   public void randomCombination() : avec contenu&#10;   public void userCombination() : avec contenu&#10;   public void randomGestion() avec contenu&#10;   +&gt; la méthode mise en commentaire public void comparaison(), car pour l'instant ne fonctionne pas&#10;ajout des attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;ajout de getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   + méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTab(int position)&#10;   + méthode de modification d'un élément précis de tab&#10;   public void setElementFromTab(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   + méthode de recupération d'un élément précis de tabUser&#10;    public int getElementFromTabUserAt(int position)&#10;    + méthode de modification d'un élément précis de tabUser&#10;    public void setElementFromTabUserAt(int position, int value)&#10;    public int getTabLength()&#10;    public void setTabLength(int tabLength)&#10;    public boolean isComparaison()&#10;    public void setcomparaison(boolean comparaison)&#10;    public int getNumberOfTries()&#10;    public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;ajout d'un constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;ajout des méthodes Override&#10;    public void tipsGestion () : avec contenu&#10;    public GameMode challenger() : avec contenu&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    + méthode mise en commentaire car ne fonctionne pas &#10;    public void comparaison()&#10;    &#10;MasterMindGame&#10;ajout d'un constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;ajout d'override : &#10;    public GameMode challenger() : vide&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;+ Ajout d'une classe Main avec test de game.runGame()&#10;&#10;+ Ajout des diagrammes UML au suivi Git&#10;&#10;ETAT DU PROGRAMME">
      <created>1542805715981</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1542805715981</updated>
    </task>
    <task id="LOCAL-00005" summary="ETAT DU PROGRAMME :&#10;idem que modification antérieure : correction de deux noms de méthodes dans GameMode et donc de leurs appels dans MoreOrLessGame : &#10;public int getElementFromTab (int position) =&gt; public int getElementFromTabAt(int position)&#10;public void setElementFromTab(int position, int value) =&gt; public void setElementFromTabAt(int position, int value)   &#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(),&#10;   public void runGame,&#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;=&gt; toutes ses méthodes ont un contenu&#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) : avec contenu&#10;méthodes : &#10;   public GameMode challenger() : vide&#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() : avec contenu&#10;   public void numberOfTriesGestion() : avec contenu&#10;   public void tipsGestion() : vide&#10;   public void randomCombination() : avec contenu&#10;   public void userCombination() : avec contenu&#10;   public void randomGestion() avec contenu&#10;   +&gt; la méthode mise en commentaire public void comparaison(), car pour l'instant ne fonctionne pas&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;ajout de getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   + méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   + méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   + méthode de recupération d'un élément précis de tabUser&#10;    public int getElementFromTabUserAt(int position)&#10;    + méthode de modification d'un élément précis de tabUser&#10;    public void setElementFromTabUserAt(int position, int value)&#10;    public int getTabLength()&#10;    public void setTabLength(int tabLength)&#10;    public boolean isComparaison()&#10;    public void setcomparaison(boolean comparaison)&#10;    public int getNumberOfTries()&#10;    public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public void tipsGestion () : avec contenu&#10;    public GameMode challenger() : avec contenu&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    + méthode mise en commentaire car ne fonctionne pas &#10;    public void comparaison()&#10;    &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() : vide&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()">
      <created>1542807189950</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1542807189950</updated>
    </task>
    <task id="LOCAL-00006" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger tant qu'on reste dans les &quot;clous&quot;. &#10;Toujours des soucis d'Exceptions &#10;+ un essai est en trop en cas de mauvaises réponses : ainsi si l'utilisateur fixe le nombre d'essais à 4, on pourra se tromper 5 fois avant de voir apparaitre le message de fin.   &#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(),&#10;+&gt; modification&#10;  public void runGame,&#10;+&gt; ajout&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;+&gt;ajout&#10;  boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void numberOfTriesGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;   public void randomGestion() &#10;   +&gt; modification&#10;    public boolean comparaison() : avec contenu&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;ajout de getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   + méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   + méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   + méthode de recupération d'un élément précis de tabUser&#10;    public int getElementFromTabUserAt(int position)&#10;    + méthode de modification d'un élément précis de tabUser&#10;    public void setElementFromTabUserAt(int position, int value)&#10;    public int getTabLength()&#10;    public void setTabLength(int tabLength)&#10;    public boolean isComparaison()&#10;    public void setcomparaison(boolean comparaison)&#10;    public int getNumberOfTries()&#10;    public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10; +&gt; modification &#10;    public void comparaison()&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10; +&gt; boolean compa&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() : vide&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()">
      <created>1542818146918</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1542818146918</updated>
    </task>
    <task id="LOCAL-00007" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger tant qu'on reste dans les &quot;clous&quot; &lt;= après vérification la version précédente avait de gros problèmes de comparaison de combinaison utilisateur et random.  &#10;Toujours des soucis d'Exceptions&#10; &#10;&#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(),&#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;   +&gt; modification&#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10; +&gt; modification &#10;    public void comparaison() =&gt; suppression &#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() : vide&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()">
      <created>1542890580958</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1542890580958</updated>
    </task>
    <task id="LOCAL-00008" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Les exceptions sont gérées.&#10;Corrections d'erreurs. &#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &lt;=modifiée&#10;   public void runGame,&lt;=modifiée&#10;   public void displayEnding()&lt;=modifiée&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &lt;=modifiée&#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &lt;=modifiée&#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() : vide&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()">
      <created>1542976180433</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1542976180433</updated>
    </task>
    <task id="LOCAL-00009" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Le programme semble fonctionner pour le mastermind en mode challenger&#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &lt;=modifiée&#10;   public void runGame,&lt;=modifiée&#10;   public void displayEnding()&lt;=modifiée&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &lt;=modifiée&#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &lt;=modifiée&#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &lt;+&#10;    public void tipsGestion()&lt;+ajout&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()">
      <created>1543046136531</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1543046136531</updated>
    </task>
    <task id="LOCAL-00010" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Le programme semble fonctionner pour le mastermind en mode challenger&#10;Le programme semble fonctionner pour le mastermind en mode defenseur&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&lt;+&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &lt;+&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()">
      <created>1543064716757</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1543064716757</updated>
    </task>
    <task id="LOCAL-00011" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Après GROSSE MAJ : le programme semble fonctionner pour le mastermind en mode challenger (amélioration des tips) &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet &#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&lt;+&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10; private int number&#10;       &#10;Main avec test de game.runGame()">
      <created>1543931532381</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1543931532381</updated>
    </task>
    <task id="LOCAL-00012" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;le programme semble fonctionner pour le mastermind en mode challenger (tips amélio) &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet &#10;Ajout d'un Folder contenant config.properties + Ajout de la classe GameGetPropertyValues&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10; private int number&#10; &#10;GameGetPropertyValues &lt;+&#10;méthodes&#10;    public String getPropValues() throws IOException&#10;attributs&#10;String result&#10;InpuStream inputStream    &#10;       &#10;Main avec test de game.runGame()">
      <created>1543943084823</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1543943084823</updated>
    </task>
    <task id="LOCAL-00013" summary="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;le programme fonctionne pour le mastermind en mode challenger &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet &#10;Changement dans l'agencement des folders globaux&#10;&#10;Changement dans GameMode =&gt; suppression de l'attribut private int numberRandom + du type de retour de la méthodepublic randomCombination() =&gt; public int randomCombination + ajustement dans public void randomGestion()&#10;&#10;Ajout de la classe GameProperties + changement dans la classe GameGetPropertyValues&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &lt;+&#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &lt;+&#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1544117703879</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1544117703879</updated>
    </task>
    <task id="LOCAL-00014" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;fonctionne pour le jeu du + ou - en mode défenseur MAIS l'algo peut être optimisé. Pas de bugg de repérés pour le moment.&#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet. &#10;COMMENTAIRES : &#10;Gros Ajout dans MoreOrLessGame pour gérer le mode défenseur&#10;Ajout dans GameManager des phrases d'ending pour le mode défenseur&#10;Ajout dans GameMode d'un max et d'un min pour random : private int randomMax et private int randomMin + les setters et getters correspondants &#10;+  ajouts de quelques commentaires&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&lt;+ ajout d'élément d'ending pour le mode défenseur&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int randomMax&#10;   private int randomMin   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&lt;+&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    private int mean()&lt;+&#10;    private void firstTurnComputerResponseGeneration()&lt;+&#10;    private void computerResponseGeneration()&lt;+&#10;    public boolean compa()&lt;+&#10;    public void userTips()&lt;+&#10;    &#10;     &#10;attributs&#10;   private boolean compa &lt;+&#10;   private int compteur&#10;   private int computerTab[]&lt;+&#10;   private String userResponse[]&lt;+&#10;   private ArrayList&lt;Integer&gt; indexOfWriteP&lt;+&#10;   private int writePlaced[]&lt;+&#10;   private int computerTabLength&lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1544552987503</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1544552987503</updated>
    </task>
    <task id="LOCAL-00015" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement en cours de l'algo du mode défenseur du + ou - &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet.&#10;&#10;COMMENTAIRES : &#10;Ajout d'une classe SolverHelper et mise en commentaire des méthodes inutiles ou à remanier pour l'algo du mode défenseur du + ou -&#10;changement du nom des constantes private int randomMax =&gt;RANDOM_MAX et private int randomMin=&gt; RANDOM_MIN et changement en conséquence dans le code &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &lt;+&#10;   private int RANDOM_MIN &lt;+ &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    private int mean()&#10;    private void firstTurnComputerResponseGeneration()&lt;- mise en commentaire&#10;    private void computerResponseGeneration()&lt;- mise en commentaire&#10;    public boolean compa()&lt;- mise en commentaire&#10;    public void userTips()&#10;    &#10;     &#10;attributs&#10;   private boolean compa &#10;   private int compteur&#10;   private SolverHelper computerTab[] &lt;+&#10;   private String userResponse[]&#10;   private ArrayList&lt;Integer&gt; indexOfWriteP&#10;   private int writePlaced[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &lt;+&#10;constructeur&lt;+&#10;    public SolverHelper()&lt;+&#10;&#10;attributs&lt;+&#10;    private int max&lt;+&#10;    private int min&lt;+&#10;    private int lastTry&#10;&#10;méthodes&lt;+&#10;    public int guessNumber()&lt;+&#10;    public void analyse(String s)&lt;+&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1544709857685</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1544709857685</updated>
    </task>
    <task id="LOCAL-00016" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;remaniement de tout le mode défenseur en fonction de solverHelper. &#10;Changement de la valeur de private int max dans solverHelper  9 =&gt; 10&#10;Certains relicats de l'ancien code sont toujours en commenté et sont à supprimer. De même il faut revoir les commentaires. &#10;&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    private int mean()&#10;    private void firstTurnComputerResponseGeneration()&lt;- mise en commentaire&#10;    private void computerResponseGeneration()&lt;- mise en commentaire&#10;    public boolean compa()&lt;+remanié &#10;    public void userTips()&lt;++&#10;    &#10;     &#10;attributs&#10;   private boolean compa &#10;   private int compteur&#10;   private int computerTab[] &#10;   private String userResponse[]&#10;   private ArrayList&lt;Integer&gt; indexOfWriteP&#10;   private String goodResponseComparaisonTab[]&lt;+&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;&#10;attributs&#10;    private int max&lt;+&#10;    private int min&#10;    private int lastTry&#10;&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1544802905229</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1544802905230</updated>
    </task>
    <task id="LOCAL-00017" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;Changement des commentaires, suppression des méthodes inutiles et changement de nom pour certaines méthodes/attributs&#10;MoreOrLess : private boolean compa =&gt; private boolean comparaison&#10;             public boolean compa()=&gt; public boolean defenderModeComparaisonManager&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &lt;+&#10;    public void userTips()&#10;    &#10;     &#10;attributs&#10;   private boolean comparaison &lt;+&#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1544862622031</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1544862622031</updated>
    </task>
    <task id="LOCAL-00018" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;Gros changement pour le mode défenseur du mastermind et création d'une classe SolverHelperMastermind &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &lt;+&#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &lt;+&#10;     public boolean defenderModeComparaisonManagerMastermind()&lt;+   &#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &lt;+&#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&lt;+&#10;    private int writePlacedTab[];&lt;+&#10;    private int presentNumbersTab[];&lt;+&#10;    private String goodResponseComparaisonTab[];&lt;+ &#10;    private int computerTabLength;&lt;+ &#10;    private int roundCounter;&lt;+&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;+&#10;méthodes:&#10;    public SolverHelperMastermind()&lt;+&#10;    public int guessNumber()&lt;+&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&lt;+&#10;attributs : &#10;    private int max;&lt;+&#10;    private int min;&lt;+&#10;    private int position;&lt;+&#10;    private static int createdObjectsCounter;&lt;+&#10;    private int tryNumber;&lt;+&#10;getters et setters : &#10;    public int getPosition()&lt;+&#10;    public void setPosition(int position)&lt;+ &#10;    public int getTryNumber()&lt;+&#10;    public void setTryNumber(int tryNumber)&lt;+&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1545491214814</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1545491214814</updated>
    </task>
    <task id="LOCAL-00019" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;GROSSE MAJ pour le mode défenseur du mastermindMind avec l'implem de plusieurs classes et méthodes =&gt; pour l'instant fonctionne SAUF l'affichage de fin =&gt;&#10;    Le programme plante dans le SolverHelperMasterMind dans static ListOfSolutionsMastermind find(MastermindGame mastermindGame) après l'utilisation de la méthode permut et au moment de lancer le second while =&gt; on a un nullpointer &#10;+ ATTENTION : un constructeur vide a été crée dans GameMode pour autoriser la création du constructeur spécial MastermindGame en mode defender. &#10;&#10;RESUME ARCHITECTURE&#10;GameManager  &#10;méthodes :&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs :&#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;   public GameMode()&lt;+&#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame &#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes :&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs :&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;    public MastermindGame(int combinationLength)&lt;+&#10;    public MastermindGame (int [] t)&lt;+&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &lt;+&#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()&#10;     private void launcher(MastermindGame mastermindGame)&lt;+&#10;     public boolean winningResult(ResultMastermindDefender r)&lt;+&#10;     public ResultMastermindDefender processGuess(ListOfSolutionsMastermind guess, boolean verbose)&lt;+&#10;     public ResultMastermindDefender processGuess(ListOfSolutionsMastermind guess)&lt;+&#10;     public String toString()&lt;+&#10; attributs :&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10;    public ListOfSolutionsMastermind secret;&lt;+&#10;    int length;&lt;+&#10;    private int usedGuesses;&lt;+&#10;getters/setters&#10;    private int usedGuesses;&lt;+&#10;    public ListOfSolutionsMastermind getSecret()&lt;+    &#10;    int getUsedGuesses()&lt;+&#10;    &#10;    &#10;GameGetPropertyValues &#10;méthodes :&#10;    public GameProperties getPropValues() throws IOException &#10;attributs :&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur :&#10;    public GameProperties()&#10;attributs :&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters :&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur :&#10;    public SolverHelper()&#10;attributs :&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes :&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;+&#10;méthodes :&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;    public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;    static ListOfListOfSolutionsMastermind subsets(int n)&lt;+&#10;    subsets(int min, int max, int card, ListOfSolutionsMastermind listOfSol, ListOfListOfSolutionsMastermind listOfListOfSol)&lt;+&#10;    static ListOfListOfSolutionsMastermind filterSubsets(ResultMastermindDefender result, ListOfSolutionsMastermind guess,ListOfListOfSolutionsMastermind listOfListOfSol)&lt;+&#10;    permut(int n, ListOfSolutionsMastermind differentNumbers, TryMastermindDefender tries)&lt;+&#10;    private static boolean compatible(ListOfSolutionsMastermind listOfSolutionsMastermind, TryMastermindDefender tries)&lt;+&#10;    private static ListOfListOfSolutionsMastermind permut(TryMastermindDefender tries, int i, int n, int[] tab, ListOfSolutionsMastermind listOfSolutionsMastermind,ListOfListOfSolutionsMastermind listOfListOfSolutionsMastermind)&lt;+&#10;    static ListOfListOfSolutionsMastermind filter(ResultMastermindDefender res, ListOfSolutionsMastermind guess, ListOfListOfSolutionsMastermind listOfListOfSolutionsMastermind)&lt;+&#10;    static ListOfSolutionsMastermind find(MastermindGame mastermindGame)&lt;+ &#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;    private static int combinationLength;&lt;+&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;    public static int getCombinationLength()&lt;+&#10;    public static void setCombinationLength(int combinationLength)&lt;+&#10;     &#10; &#10;ListOfListOfSolutionsMastermind &lt;+&#10;constructeur :&#10;     public ListOfListOfSolutionsMastermind(ListOfSolutionsMastermind listValue, ListOfListOfSolutionsMastermind previousValue)&lt;+&#10;méthodes :&#10;    static PrintWriter writer;&lt;+&#10;    &#10;    static void printPossibilities(ListOfListOfSolutionsMastermind listOfListOfSolutionsMastermind)&lt;+&#10;attributs :&#10;    ListOfSolutionsMastermind listValue;&lt;+&#10;    ListOfListOfSolutionsMastermind previousValue;&lt;+&#10;getters et setters :           &#10;&#10;ListOfSolutionsMastermind &lt;+&#10;constructeur : &#10;    ListOfSolutionsMastermind(int listValue, ListOfSolutionsMastermind previousValue)&lt;+&#10;méthodes :&#10;   &#10;    public String toString()&lt;+&#10;    boolean equalsFirst(ListOfSolutionsMastermind guess)&lt;+&#10;    int presentNumbersList(ListOfSolutionsMastermind guessListOfSolutions)&lt;+&#10;    int writePlacedList(ListOfSolutionsMastermind guessListOfSolutions)&lt;+&#10;    ResultMastermindDefender evaluate(ListOfSolutionsMastermind guessListOfSolutions)&lt;+&#10;attributs :&#10;    int listValue;&lt;+&#10;    ListOfSolutionsMastermind previousValue;&lt;+&#10;&#10;ResultMastermindDefender &lt;+&#10;constructeur :&#10;    public ResultMastermindDefender(int writePlacedNumbers, int presentNumbers)&lt;+&#10;méthodes :&#10;    public boolean equals(ResultMastermindDefender r)&lt;+&#10;     public String toString()&lt;+&#10;attributs :&#10;    int writePlacedNumbers;&lt;+&#10;    int presentNumbers;&lt;+&#10;getters et setters :&#10;&#10;TryMastermindDefender &lt;+&#10;constructeur :&#10; public TryMastermindDefender(ListOfSolutionsMastermind guess, ResultMastermindDefender result, TryMastermindDefender previous)&lt;+&#10;méthodes :&#10;attributs :&#10;    ListOfSolutionsMastermind guess;&lt;+&#10;    ResultMastermindDefender result;&lt;+&#10;    TryMastermindDefender previous;&lt;+&#10;getters et setters :&#10;       &#10;Main avec test de game.runGame()">
      <created>1549445931719</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1549445931719</updated>
    </task>
    <task id="LOCAL-00020" summary="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;GROSSE MAJ pour le mode défenseur du mastermindMind avec l'implem de plusieurs classes et méthodes =&gt; pour l'instant fonctionne SAUF l'affichage de fin =&gt; Le programme plante dans le SolverHelperMasterMind dans  &#10;&#10;COMMENTAIRES : &#10;Changement au niveau de la méthode de récupération du secret, maintenant le secret est dans le bon sens &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&lt;+&#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1549701707912</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1549701707912</updated>
    </task>
    <task id="LOCAL-00021" summary="ETAT DU PROGRAMME :&#10;ROLLBACK à version du 06/02/19 + MAJ challenger&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;Défenseur du + ou - Ok à verif&#10;GROSSE MAJ pour le mode défenseur du mastermindMind =&gt; Fonctionne jusqu'à un certain point + Bugg important encas de tailleCombi&lt; max &#10;+ AJOUT de log4j en librairie externe&#10;+patate&#10;COMMENTAIRES : &#10;Changement au niveau de la méthode de récupération du secret, maintenant le secret est dans le bon sens &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&lt;+&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&lt;+&#10;     public void combinationNumberOfNumbers()&lt;+&#10;     private void secretGestion()&lt;+&#10;     private int[] initTab()&lt;+&#10;     private boolean isFinished(int[] tab)&lt;+&#10;     private void increment(int[] tab)&lt;+&#10;     private void solve(int[] tabSol)&lt;+&#10;     private void filterList(int i)&lt;+&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&lt;+&#10;     private void userFeedBack()&lt;+&#10;     private void extractWhenSimilarPoint(int[] tab)&lt;+&#10;     private void extractPair(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractTrio(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractSixte(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractNonet(List&lt;Integer&gt; list1)&lt;+&#10;     private void filterList(int[] tab)&lt;+&#10;     private int[] copySol(int[] tab)&lt;+&#10;     private void printFirst(int[] ints)&lt;+&#10;     private int countWellPlaced(int[] tab, int[] save)&lt;+&#10;     private int countMissPlaced(int[] tab, int[] save)&lt;+&#10;     public boolean defenderModeComparaisonManagerMastermind()&lt;+&#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10;    private int computerTabLength; &lt;+&#10;    private int numberOfTries;&lt;+&#10;    private int roundCounter; &lt;+&#10;    private int maxNumberOfNumbers; &lt;+&#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&lt;+&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;();&lt;+&#10;    private int[] solution;&lt;+&#10;    private int listSize;&lt;+&#10;    private int numberOfWritePlaced; &lt;+&#10;    private int numberOfPresentNumbers; &lt;+&#10;    private String endingSolution;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1551899660766</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1551899660767</updated>
    </task>
    <task id="LOCAL-00022" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne  &#10;COMMENTAIRES : &#10;Gros ménage dans la classe Mastermind =&gt; supression des méthodes inutiles ou commentées &#10; construction du mode duel en cours&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1552473720132</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1552473720132</updated>
    </task>
    <task id="LOCAL-00023" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne  &#10;COMMENTAIRES : &#10;Changement dans la classe GameProperties =&gt; ajout d'une var de classe + modification du config.properties&#10;&#10;Modification dans la méthode qui gère les random pour les modes défenseur, dans la classe GameMode, pour pouvoir gérer les modes duels&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &lt;+&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&lt;+&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1552994525643</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1552994525643</updated>
    </task>
    <task id="LOCAL-00024" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne&#10;Duel +- =&gt; fonctionnel à priori, perfectionnement en cours  &#10;COMMENTAIRES : &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&lt;+&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&lt;+&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &lt;+&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1553068000754</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1553068000754</updated>
    </task>
    <task id="LOCAL-00025" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle, lorsque l'ordi a trouvé avant la fin du nombre d'essais le break ne fonctionne pas... On va jusqu'à la fin du nombre d'essais &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, mais soucis de boucle cf mastermind + si la première partie est trouvée avant la 2em le break ne fonctionne pas. &#10;COMMENTAIRES &#10;Ajout des logger UNIQUEMENT pour les warning et quelques infos&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &lt;+&#10;   private boolean computerSucess; &lt;+&#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &lt;+&#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &lt;+&#10;   public void setUserSucces(boolean userSucces) &lt;+&#10;   public boolean isComputerSucess() &lt;+&#10;   public void setComputerSucess(boolean computerSucess) &lt;+&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &lt;+&#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1554208243315</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1554208243315</updated>
    </task>
    <task id="LOCAL-00026" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle, lorsque l'ordi a trouvé avant la fin du nombre d'essais le break ne fonctionne pas... On va jusqu'à la fin du nombre d'essais &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, mais soucis de boucle cf mastermind + si la première partie est trouvée avant la 2em le break ne fonctionne pas. &#10;COMMENTAIRES &#10;Ajout des logger UNIQUEMENT pour les warning et quelques infos&#10;=&gt; ICI juste MAJ du diagramme UML = ATTENTION car quelques soucis de mise en forme pour les tableaux/ ArrayList&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &lt;+&#10;   private boolean computerSucess; &lt;+&#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &lt;+&#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &lt;+&#10;   public void setUserSucces(boolean userSucces) &lt;+&#10;   public boolean isComputerSucess() &lt;+&#10;   public void setComputerSucess(boolean computerSucess) &lt;+&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &lt;+&#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1554289197194</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1554289197194</updated>
    </task>
    <task id="LOCAL-00027" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle réglé&#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, soucis de boucle réglé&#10;COMMENTAIRES &#10;Supression de classes devenues obsolètes&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &lt;+&#10;   private boolean computerSucess; &lt;+&#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &lt;+&#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &lt;+&#10;   public void setUserSucces(boolean userSucces) &lt;+&#10;   public boolean isComputerSucess() &lt;+&#10;   public void setComputerSucess(boolean computerSucess) &lt;+&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &lt;+&#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1554376865504</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1554376865504</updated>
    </task>
    <task id="LOCAL-00028" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle réglé&#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, soucis de boucle réglé&#10;COMMENTAIRES &#10;Rajout de messages en mode logger.info dans la classe GameManager&#10;Amelio dans Mastermind et MoreOrLess, pour diminuer les duplications de code &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &#10;   private boolean computerSucess; &#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &#10;   public void setUserSucces(boolean userSucces) &#10;   public boolean isComputerSucess() &#10;   public void setComputerSucess(boolean computerSucess) &#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;    private void combinationAndTipsGestion&lt;+&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     private void combinationAndTipsGestion()&lt;+&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void roundGestion()&lt;+&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private int sumWellPlacedAndMissPlaced;&lt;+&#10;    private int[] saveProp;&lt;+&#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1554381076813</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1554381076813</updated>
    </task>
    <task id="LOCAL-00029" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle réglé&#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, soucis de boucle réglé&#10;COMMENTAIRES &#10;changement pour lo4j mais non fonctionnel&#10;changement pour les properties =&gt; GameGetPropertyValues GameMode et GameProperties&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &#10;   private boolean computerSucess; &#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &#10;   public void setUserSucces(boolean userSucces) &#10;   public boolean isComputerSucess() &#10;   public void setComputerSucess(boolean computerSucess) &#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;    private void combinationAndTipsGestion&lt;+&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     private void combinationAndTipsGestion()&lt;+&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void roundGestion()&lt;+&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private int sumWellPlacedAndMissPlaced;&lt;+&#10;    private int[] saveProp;&lt;+&#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1554472383867</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1554472383868</updated>
    </task>
    <task id="LOCAL-00030" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionnel&#10;COMMENTAIRES &#10;problèmes de Log4j et properties résolu&#10;Améliorations multiples en cours  &#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &#10;   private boolean computerSucess; &#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &#10;   public void setUserSucces(boolean userSucces) &#10;   public boolean isComputerSucess() &#10;   public void setComputerSucess(boolean computerSucess) &#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;    private void combinationAndTipsGestion&lt;+&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     private void combinationAndTipsGestion()&lt;+&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void roundGestion()&lt;+&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private int sumWellPlacedAndMissPlaced;&lt;+&#10;    private int[] saveProp;&lt;+&#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()">
      <created>1555665268373</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1555665268374</updated>
    </task>
    <task id="LOCAL-00031" summary="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionnel&#10;COMMENTAIRES &#10;Améliorations multiples  : Ajout d'une méthode qui gère en partie les tentatives de tricherie dans le jeu du +-&#10;Problèmes d'affichage des log + message de warning résolu &#10;+ optimisation en cours&#10;+ Mise en forme">
      <created>1555781896095</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1555781896095</updated>
    </task>
    <option name="localTasksCounter" value="32" />
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1696" height="1026" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" sideWeight="0.49906892" visible="true" weight="0.27567238" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" sideWeight="0.5009311" side_tool="true" weight="0.28545234" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32827735" />
      <window_info active="true" anchor="bottom" id="Run" order="2" sideWeight="0.79156476" visible="true" weight="0.29899216" />
      <window_info anchor="bottom" id="Debug" order="3" sideWeight="0.6937653" weight="0.38521835" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info anchor="bottom" id="Event Log" order="8" sideWeight="0.19376528" side_tool="true" weight="0.32474804" />
      <window_info anchor="bottom" id="Version Control" order="9" sideWeight="0.8062347" weight="0.32474804" />
      <window_info anchor="bottom" id="Messages" order="10" sideWeight="0.49938875" weight="0.3393057" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="Palette&#9;" order="6" />
      <window_info anchor="right" id="Maven Projects" order="7" />
      <window_info anchor="right" id="Maven" order="8" weight="0.3294621" />
    </layout>
    <layout-to-restore>
      <window_info active="true" content_ui="combo" id="Project" order="0" sideWeight="0.49906892" visible="true" weight="0.23410758" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" sideWeight="0.5009311" side_tool="true" weight="0.28545234" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" weight="0.32827735" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.79156476" weight="0.312026" />
      <window_info anchor="bottom" id="Debug" order="3" sideWeight="0.6937653" weight="0.38521835" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info anchor="bottom" id="Event Log" order="8" sideWeight="0.20843521" side_tool="true" weight="0.32362822" />
      <window_info anchor="bottom" id="Version Control" order="9" sideWeight="0.8704156" weight="0.32474804" />
      <window_info anchor="bottom" id="Messages" order="10" sideWeight="0.49938875" weight="0.3393057" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="Palette&#9;" order="6" />
      <window_info anchor="right" id="Maven Projects" order="7" />
      <window_info anchor="right" id="Maven" order="8" weight="0.3294621" />
    </layout-to-restore>
  </component>
  <component name="Vcs.Log.History.Properties">
    <option name="COLUMN_ORDER">
      <list>
        <option value="0" />
        <option value="2" />
        <option value="3" />
        <option value="1" />
      </list>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Les exceptions sont gérées.&#10;Corrections d'erreurs. &#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &lt;=modifiée&#10;   public void runGame,&lt;=modifiée&#10;   public void displayEnding()&lt;=modifiée&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &lt;=modifiée&#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &lt;=modifiée&#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() : vide&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Le programme semble fonctionner pour le mastermind en mode challenger&#10;&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &lt;=modifiée&#10;   public void runGame,&lt;=modifiée&#10;   public void displayEnding()&lt;=modifiée&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &lt;=modifiée&#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &lt;=modifiée&#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &lt;+&#10;    public void tipsGestion()&lt;+ajout&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Le programme semble fonctionner pour le mastermind en mode challenger&#10;Le programme semble fonctionner pour le mastermind en mode defenseur&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&lt;+&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &lt;+&#10;    public GameMode duel() : vide&#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;Après GROSSE MAJ : le programme semble fonctionner pour le mastermind en mode challenger (amélioration des tips) &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet &#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&lt;+&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10; private int number&#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;le programme semble fonctionner pour le mastermind en mode challenger (tips amélio) &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet &#10;Ajout d'un Folder contenant config.properties + Ajout de la classe GameGetPropertyValues&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10; private int number&#10; &#10;GameGetPropertyValues &lt;+&#10;méthodes&#10;    public String getPropValues() throws IOException&#10;attributs&#10;String result&#10;InpuStream inputStream    &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;le programme fonctionne pour le jeu du + ou - en mode challenger. &#10;le programme fonctionne pour le mastermind en mode challenger &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet &#10;Changement dans l'agencement des folders globaux&#10;&#10;Changement dans GameMode =&gt; suppression de l'attribut private int numberRandom + du type de retour de la méthodepublic randomCombination() =&gt; public int randomCombination + ajustement dans public void randomGestion()&#10;&#10;Ajout de la classe GameProperties + changement dans la classe GameGetPropertyValues&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;méthodes Override&#10;    public GameMode defender() : vide&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger() &#10;attributs&#10;boolean compa&#10;private int compteur&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame() =&gt; fixé avec numberOfTries et combinationLength à 0&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &lt;+&#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &lt;+&#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;fonctionne pour le jeu du + ou - en mode défenseur MAIS l'algo peut être optimisé. Pas de bugg de repérés pour le moment.&#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet. &#10;COMMENTAIRES : &#10;Gros Ajout dans MoreOrLessGame pour gérer le mode défenseur&#10;Ajout dans GameManager des phrases d'ending pour le mode défenseur&#10;Ajout dans GameMode d'un max et d'un min pour random : private int randomMax et private int randomMin + les setters et getters correspondants &#10;+  ajouts de quelques commentaires&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&lt;+ ajout d'élément d'ending pour le mode défenseur&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int randomMax&#10;   private int randomMin   &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&lt;+&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    private int mean()&lt;+&#10;    private void firstTurnComputerResponseGeneration()&lt;+&#10;    private void computerResponseGeneration()&lt;+&#10;    public boolean compa()&lt;+&#10;    public void userTips()&lt;+&#10;    &#10;     &#10;attributs&#10;   private boolean compa &lt;+&#10;   private int compteur&#10;   private int computerTab[]&lt;+&#10;   private String userResponse[]&lt;+&#10;   private ArrayList&lt;Integer&gt; indexOfWriteP&lt;+&#10;   private int writePlaced[]&lt;+&#10;   private int computerTabLength&lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement en cours de l'algo du mode défenseur du + ou - &#10;Pour le mastermind en mode defenseur : une MAJ est nécessaire car incomplet.&#10;&#10;COMMENTAIRES : &#10;Ajout d'une classe SolverHelper et mise en commentaire des méthodes inutiles ou à remanier pour l'algo du mode défenseur du + ou -&#10;changement du nom des constantes private int randomMax =&gt;RANDOM_MAX et private int randomMin=&gt; RANDOM_MIN et changement en conséquence dans le code &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &lt;+&#10;   private int RANDOM_MIN &lt;+ &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    private int mean()&#10;    private void firstTurnComputerResponseGeneration()&lt;- mise en commentaire&#10;    private void computerResponseGeneration()&lt;- mise en commentaire&#10;    public boolean compa()&lt;- mise en commentaire&#10;    public void userTips()&#10;    &#10;     &#10;attributs&#10;   private boolean compa &#10;   private int compteur&#10;   private SolverHelper computerTab[] &lt;+&#10;   private String userResponse[]&#10;   private ArrayList&lt;Integer&gt; indexOfWriteP&#10;   private int writePlaced[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &lt;+&#10;constructeur&lt;+&#10;    public SolverHelper()&lt;+&#10;&#10;attributs&lt;+&#10;    private int max&lt;+&#10;    private int min&lt;+&#10;    private int lastTry&#10;&#10;méthodes&lt;+&#10;    public int guessNumber()&lt;+&#10;    public void analyse(String s)&lt;+&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;remaniement de tout le mode défenseur en fonction de solverHelper. &#10;Changement de la valeur de private int max dans solverHelper  9 =&gt; 10&#10;Certains relicats de l'ancien code sont toujours en commenté et sont à supprimer. De même il faut revoir les commentaires. &#10;&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    private int mean()&#10;    private void firstTurnComputerResponseGeneration()&lt;- mise en commentaire&#10;    private void computerResponseGeneration()&lt;- mise en commentaire&#10;    public boolean compa()&lt;+remanié &#10;    public void userTips()&lt;++&#10;    &#10;     &#10;attributs&#10;   private boolean compa &#10;   private int compteur&#10;   private int computerTab[] &#10;   private String userResponse[]&#10;   private ArrayList&lt;Integer&gt; indexOfWriteP&#10;   private String goodResponseComparaisonTab[]&lt;+&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;&#10;attributs&#10;    private int max&lt;+&#10;    private int min&#10;    private int lastTry&#10;&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;Changement des commentaires, suppression des méthodes inutiles et changement de nom pour certaines méthodes/attributs&#10;MoreOrLess : private boolean compa =&gt; private boolean comparaison&#10;             public boolean compa()=&gt; public boolean defenderModeComparaisonManager&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &lt;+&#10;    public void userTips()&#10;    &#10;     &#10;attributs&#10;   private boolean comparaison &lt;+&#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10; attributs&#10;    private int number&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;Gros changement pour le mode défenseur du mastermind et création d'une classe SolverHelperMastermind &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &lt;+&#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &lt;+&#10;     public boolean defenderModeComparaisonManagerMastermind()&lt;+   &#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &lt;+&#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&lt;+&#10;    private int writePlacedTab[];&lt;+&#10;    private int presentNumbersTab[];&lt;+&#10;    private String goodResponseComparaisonTab[];&lt;+ &#10;    private int computerTabLength;&lt;+ &#10;    private int roundCounter;&lt;+&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;+&#10;méthodes:&#10;    public SolverHelperMastermind()&lt;+&#10;    public int guessNumber()&lt;+&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&lt;+&#10;attributs : &#10;    private int max;&lt;+&#10;    private int min;&lt;+&#10;    private int position;&lt;+&#10;    private static int createdObjectsCounter;&lt;+&#10;    private int tryNumber;&lt;+&#10;getters et setters : &#10;    public int getPosition()&lt;+&#10;    public void setPosition(int position)&lt;+ &#10;    public int getTryNumber()&lt;+&#10;    public void setTryNumber(int tryNumber)&lt;+&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;&#10;&#10;COMMENTAIRES : &#10;GROSSE MAJ pour le mode défenseur du mastermindMind avec l'implem de plusieurs classes et méthodes =&gt; pour l'instant fonctionne SAUF l'affichage de fin =&gt;&#10;    Le programme plante dans le SolverHelperMasterMind dans static ListOfSolutionsMastermind find(MastermindGame mastermindGame) après l'utilisation de la méthode permut et au moment de lancer le second while =&gt; on a un nullpointer &#10;+ ATTENTION : un constructeur vide a été crée dans GameMode pour autoriser la création du constructeur spécial MastermindGame en mode defender. &#10;&#10;RESUME ARCHITECTURE&#10;GameManager  &#10;méthodes :&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs :&#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;   public GameMode()&lt;+&#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame &#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes :&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs :&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;    public MastermindGame(int combinationLength)&lt;+&#10;    public MastermindGame (int [] t)&lt;+&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &lt;+&#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()&#10;     private void launcher(MastermindGame mastermindGame)&lt;+&#10;     public boolean winningResult(ResultMastermindDefender r)&lt;+&#10;     public ResultMastermindDefender processGuess(ListOfSolutionsMastermind guess, boolean verbose)&lt;+&#10;     public ResultMastermindDefender processGuess(ListOfSolutionsMastermind guess)&lt;+&#10;     public String toString()&lt;+&#10; attributs :&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10;    public ListOfSolutionsMastermind secret;&lt;+&#10;    int length;&lt;+&#10;    private int usedGuesses;&lt;+&#10;getters/setters&#10;    private int usedGuesses;&lt;+&#10;    public ListOfSolutionsMastermind getSecret()&lt;+    &#10;    int getUsedGuesses()&lt;+&#10;    &#10;    &#10;GameGetPropertyValues &#10;méthodes :&#10;    public GameProperties getPropValues() throws IOException &#10;attributs :&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur :&#10;    public GameProperties()&#10;attributs :&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters :&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur :&#10;    public SolverHelper()&#10;attributs :&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes :&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;+&#10;méthodes :&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;    public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;    static ListOfListOfSolutionsMastermind subsets(int n)&lt;+&#10;    subsets(int min, int max, int card, ListOfSolutionsMastermind listOfSol, ListOfListOfSolutionsMastermind listOfListOfSol)&lt;+&#10;    static ListOfListOfSolutionsMastermind filterSubsets(ResultMastermindDefender result, ListOfSolutionsMastermind guess,ListOfListOfSolutionsMastermind listOfListOfSol)&lt;+&#10;    permut(int n, ListOfSolutionsMastermind differentNumbers, TryMastermindDefender tries)&lt;+&#10;    private static boolean compatible(ListOfSolutionsMastermind listOfSolutionsMastermind, TryMastermindDefender tries)&lt;+&#10;    private static ListOfListOfSolutionsMastermind permut(TryMastermindDefender tries, int i, int n, int[] tab, ListOfSolutionsMastermind listOfSolutionsMastermind,ListOfListOfSolutionsMastermind listOfListOfSolutionsMastermind)&lt;+&#10;    static ListOfListOfSolutionsMastermind filter(ResultMastermindDefender res, ListOfSolutionsMastermind guess, ListOfListOfSolutionsMastermind listOfListOfSolutionsMastermind)&lt;+&#10;    static ListOfSolutionsMastermind find(MastermindGame mastermindGame)&lt;+ &#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;    private static int combinationLength;&lt;+&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;    public static int getCombinationLength()&lt;+&#10;    public static void setCombinationLength(int combinationLength)&lt;+&#10;     &#10; &#10;ListOfListOfSolutionsMastermind &lt;+&#10;constructeur :&#10;     public ListOfListOfSolutionsMastermind(ListOfSolutionsMastermind listValue, ListOfListOfSolutionsMastermind previousValue)&lt;+&#10;méthodes :&#10;    static PrintWriter writer;&lt;+&#10;    &#10;    static void printPossibilities(ListOfListOfSolutionsMastermind listOfListOfSolutionsMastermind)&lt;+&#10;attributs :&#10;    ListOfSolutionsMastermind listValue;&lt;+&#10;    ListOfListOfSolutionsMastermind previousValue;&lt;+&#10;getters et setters :           &#10;&#10;ListOfSolutionsMastermind &lt;+&#10;constructeur : &#10;    ListOfSolutionsMastermind(int listValue, ListOfSolutionsMastermind previousValue)&lt;+&#10;méthodes :&#10;   &#10;    public String toString()&lt;+&#10;    boolean equalsFirst(ListOfSolutionsMastermind guess)&lt;+&#10;    int presentNumbersList(ListOfSolutionsMastermind guessListOfSolutions)&lt;+&#10;    int writePlacedList(ListOfSolutionsMastermind guessListOfSolutions)&lt;+&#10;    ResultMastermindDefender evaluate(ListOfSolutionsMastermind guessListOfSolutions)&lt;+&#10;attributs :&#10;    int listValue;&lt;+&#10;    ListOfSolutionsMastermind previousValue;&lt;+&#10;&#10;ResultMastermindDefender &lt;+&#10;constructeur :&#10;    public ResultMastermindDefender(int writePlacedNumbers, int presentNumbers)&lt;+&#10;méthodes :&#10;    public boolean equals(ResultMastermindDefender r)&lt;+&#10;     public String toString()&lt;+&#10;attributs :&#10;    int writePlacedNumbers;&lt;+&#10;    int presentNumbers;&lt;+&#10;getters et setters :&#10;&#10;TryMastermindDefender &lt;+&#10;constructeur :&#10; public TryMastermindDefender(ListOfSolutionsMastermind guess, ResultMastermindDefender result, TryMastermindDefender previous)&lt;+&#10;méthodes :&#10;attributs :&#10;    ListOfSolutionsMastermind guess;&lt;+&#10;    ResultMastermindDefender result;&lt;+&#10;    TryMastermindDefender previous;&lt;+&#10;getters et setters :&#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;remaniement du mode défenseur du + ou - =&gt; à priori fonctionne : tests supplémentaires nécessaires&#10;GROSSE MAJ pour le mode défenseur du mastermindMind avec l'implem de plusieurs classes et méthodes =&gt; pour l'instant fonctionne SAUF l'affichage de fin =&gt; Le programme plante dans le SolverHelperMasterMind dans  &#10;&#10;COMMENTAIRES : &#10;Changement au niveau de la méthode de récupération du secret, maintenant le secret est dans le bon sens &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&lt;+&#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;ROLLBACK à version du 06/02/19 + MAJ challenger&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;Défenseur du + ou - Ok à verif&#10;GROSSE MAJ pour le mode défenseur du mastermindMind =&gt; Fonctionne jusqu'à un certain point + Bugg important encas de tailleCombi&lt; max &#10;+ AJOUT de log4j en librairie externe&#10;COMMENTAIRES : &#10;Changement au niveau de la méthode de récupération du secret, maintenant le secret est dans le bon sens &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&lt;+&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&lt;+&#10;     public void combinationNumberOfNumbers()&lt;+&#10;     private void secretGestion()&lt;+&#10;     private int[] initTab()&lt;+&#10;     private boolean isFinished(int[] tab)&lt;+&#10;     private void increment(int[] tab)&lt;+&#10;     private void solve(int[] tabSol)&lt;+&#10;     private void filterList(int i)&lt;+&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&lt;+&#10;     private void userFeedBack()&lt;+&#10;     private void extractWhenSimilarPoint(int[] tab)&lt;+&#10;     private void extractPair(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractTrio(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractSixte(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractNonet(List&lt;Integer&gt; list1)&lt;+&#10;     private void filterList(int[] tab)&lt;+&#10;     private int[] copySol(int[] tab)&lt;+&#10;     private void printFirst(int[] ints)&lt;+&#10;     private int countWellPlaced(int[] tab, int[] save)&lt;+&#10;     private int countMissPlaced(int[] tab, int[] save)&lt;+&#10;     public boolean defenderModeComparaisonManagerMastermind()&lt;+&#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10;    private int computerTabLength; &lt;+&#10;    private int numberOfTries;&lt;+&#10;    private int roundCounter; &lt;+&#10;    private int maxNumberOfNumbers; &lt;+&#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&lt;+&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;();&lt;+&#10;    private int[] solution;&lt;+&#10;    private int listSize;&lt;+&#10;    private int numberOfWritePlaced; &lt;+&#10;    private int numberOfPresentNumbers; &lt;+&#10;    private String endingSolution;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;ROLLBACK à version du 06/02/19 + MAJ challenger&#10;fonctionne pour le jeu du + ou - en mode challenger. &#10;fonctionne pour le mastermind en mode challenger.&#10;Défenseur du + ou - Ok à verif&#10;GROSSE MAJ pour le mode défenseur du mastermindMind =&gt; Fonctionne jusqu'à un certain point + Bugg important encas de tailleCombi&lt; max &#10;+ AJOUT de log4j en librairie externe&#10;+patate&#10;COMMENTAIRES : &#10;Changement au niveau de la méthode de récupération du secret, maintenant le secret est dans le bon sens &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&lt;+&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&lt;+&#10;     public void combinationNumberOfNumbers()&lt;+&#10;     private void secretGestion()&lt;+&#10;     private int[] initTab()&lt;+&#10;     private boolean isFinished(int[] tab)&lt;+&#10;     private void increment(int[] tab)&lt;+&#10;     private void solve(int[] tabSol)&lt;+&#10;     private void filterList(int i)&lt;+&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&lt;+&#10;     private void userFeedBack()&lt;+&#10;     private void extractWhenSimilarPoint(int[] tab)&lt;+&#10;     private void extractPair(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractTrio(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractSixte(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&lt;+&#10;     private void extractNonet(List&lt;Integer&gt; list1)&lt;+&#10;     private void filterList(int[] tab)&lt;+&#10;     private int[] copySol(int[] tab)&lt;+&#10;     private void printFirst(int[] ints)&lt;+&#10;     private int countWellPlaced(int[] tab, int[] save)&lt;+&#10;     private int countMissPlaced(int[] tab, int[] save)&lt;+&#10;     public boolean defenderModeComparaisonManagerMastermind()&lt;+&#10; attributs&#10;    private boolean comparaison;&#10;    private int computerTab[]; &#10;    private SolverHelperMastermind tabSolverHelperMastermind[];&#10;    private int writePlacedTab[];&#10;    private int presentNumbersTab[];&#10;    private String goodResponseComparaisonTab[];&#10;    private int computerTabLength;&#10;    private int roundCounter;&#10;    private int computerTabLength; &lt;+&#10;    private int numberOfTries;&lt;+&#10;    private int roundCounter; &lt;+&#10;    private int maxNumberOfNumbers; &lt;+&#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&lt;+&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;();&lt;+&#10;    private int[] solution;&lt;+&#10;    private int listSize;&lt;+&#10;    private int numberOfWritePlaced; &lt;+&#10;    private int numberOfPresentNumbers; &lt;+&#10;    private String endingSolution;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne  &#10;COMMENTAIRES : &#10;Gros ménage dans la classe Mastermind =&gt; supression des méthodes inutiles ou commentées &#10; construction du mode duel en cours&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne  &#10;COMMENTAIRES : &#10;Changement dans la classe GameProperties =&gt; ajout d'une var de classe + modification du config.properties&#10;&#10;Modification dans la méthode qui gère les random pour les modes défenseur, dans la classe GameMode, pour pouvoir gérer les modes duels&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &lt;+&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN &#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender() :&#10;    public GameMode duel() : vide&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&lt;+&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne&#10;Duel +- =&gt; fonctionnel à priori, perfectionnement en cours  &#10;COMMENTAIRES : &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&lt;+&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&lt;+&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &lt;+&#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&lt;+&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle, lorsque l'ordi a trouvé avant la fin du nombre d'essais le break ne fonctionne pas... On va jusqu'à la fin du nombre d'essais &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, mais soucis de boucle cf mastermind + si la première partie est trouvée avant la 2em le break ne fonctionne pas. &#10;COMMENTAIRES &#10;Ajout des logger UNIQUEMENT pour les warning et quelques infos&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &lt;+&#10;   private boolean computerSucess; &lt;+&#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &lt;+&#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &lt;+&#10;   public void setUserSucces(boolean userSucces) &lt;+&#10;   public boolean isComputerSucess() &lt;+&#10;   public void setComputerSucess(boolean computerSucess) &lt;+&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &lt;+&#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle, lorsque l'ordi a trouvé avant la fin du nombre d'essais le break ne fonctionne pas... On va jusqu'à la fin du nombre d'essais &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, mais soucis de boucle cf mastermind + si la première partie est trouvée avant la 2em le break ne fonctionne pas. &#10;COMMENTAIRES &#10;Ajout des logger UNIQUEMENT pour les warning et quelques infos&#10;=&gt; ICI juste MAJ du diagramme UML = ATTENTION car quelques soucis de mise en forme pour les tableaux/ ArrayList&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &lt;+&#10;   private boolean computerSucess; &lt;+&#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &lt;+&#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &lt;+&#10;   public void setUserSucces(boolean userSucces) &lt;+&#10;   public boolean isComputerSucess() &lt;+&#10;   public void setComputerSucess(boolean computerSucess) &lt;+&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &lt;+&#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&#10;méthodes:&#10;    public SolverHelperMastermind()&#10;    public int guessNumber()&#10;     public void analyse(int[] tabWritePlaced, int[] tabPresentNumbers, int roundCounter)&#10;attributs : &#10;    private int max;&#10;    private int min;&#10;    private int position;&#10;    private static int createdObjectsCounter;&#10;    private int tryNumber;&#10;getters et setters : &#10;    public int getPosition()&#10;    public void setPosition(int position)&#10;    public int getTryNumber()&#10;    public void setTryNumber(int tryNumber)&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle réglé&#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, soucis de boucle réglé&#10;COMMENTAIRES &#10;Supression de classes devenues obsolètes&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &lt;+&#10;   private boolean computerSucess; &lt;+&#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &lt;+&#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &lt;+&#10;   public void setUserSucces(boolean userSucces) &lt;+&#10;   public boolean isComputerSucess() &lt;+&#10;   public void setComputerSucess(boolean computerSucess) &lt;+&#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &lt;+&#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &lt;+&#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle réglé&#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, soucis de boucle réglé&#10;COMMENTAIRES &#10;Rajout de messages en mode logger.info dans la classe GameManager&#10;Amelio dans Mastermind et MoreOrLess, pour diminuer les duplications de code &#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &#10;   private boolean computerSucess; &#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &#10;   public void setUserSucces(boolean userSucces) &#10;   public boolean isComputerSucess() &#10;   public void setComputerSucess(boolean computerSucess) &#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;    private void combinationAndTipsGestion&lt;+&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     private void combinationAndTipsGestion()&lt;+&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void roundGestion()&lt;+&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private int sumWellPlacedAndMissPlaced;&lt;+&#10;    private int[] saveProp;&lt;+&#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne + SOUCIS boucle réglé&#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionne, soucis de boucle réglé&#10;COMMENTAIRES &#10;changement pour lo4j mais non fonctionnel&#10;changement pour les properties =&gt; GameGetPropertyValues GameMode et GameProperties&#10;&#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &#10;   private boolean computerSucess; &#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &#10;   public void setUserSucces(boolean userSucces) &#10;   public boolean isComputerSucess() &#10;   public void setComputerSucess(boolean computerSucess) &#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;    private void combinationAndTipsGestion&lt;+&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     private void combinationAndTipsGestion()&lt;+&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void roundGestion()&lt;+&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private int sumWellPlacedAndMissPlaced;&lt;+&#10;    private int[] saveProp;&lt;+&#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionnel&#10;COMMENTAIRES &#10;problèmes de Log4j et properties résolu&#10;Améliorations multiples en cours  &#10;&#10;RESUME ARCHITECTURE&#10;GameManager : &#10;méthodes&#10;   private void displayIntroduction()&#10;   private void displayAvailableGames(),&#10;   private GameMode chooseGame(int nbOfGame),&#10;   private void displayAvailableModes(),&#10;   private GameMode chooseMode(int nbOfMode),&#10;   public void runMode(), &#10;   public void runGame,&#10;   public void displayEnding()&#10;   public void continueOrQuit()&#10;   &#10;attributs &#10;   private GameMode game&#10;   private int chooseGame&#10;   int chooseMode   &#10;   boolean continueOrQuit &#10;&#10;GameMode&#10;constructeur : &#10;   public GameMode (int numberOfTries, int combinationLength) &#10;méthodes : &#10;   public GameMode challenger() &#10;   public GameMode duel() : vide&#10;   public GameMode defender() : vide&#10;   public void combinationLengthGestion() &#10;   public void tipsGestion() &#10;   public void randomCombination() &#10;   public void userCombination() &#10;    public void numberOfTriesGestion() &#10;    public boolean comparaison() &#10;    public void randomGestion() &#10;    secretCombinationOfRandomPrint()&#10;attributs :&#10;   private int numberOfTries&#10;   private int combinationLength&#10;   private int numberRandom&#10;   private Scanner scanner&#10;   private int tab[]&#10;   private int tabUser[]&#10;   private int tabLength&#10;   private boolean comparaison&#10;   private int RANDOM_MAX &#10;   private int RANDOM_MIN&#10;   private int secretCombinationOfRandom[]&#10;   private boolean userSucces; &#10;   private boolean computerSucess; &#10;   private final static Logger logger = Logger.getLogger(GameMode.class.getName()); &#10;&#10;getters et setters : &#10;   public int [] getTab()&#10;   public void setTab&#10;   méthode de recupération d'un élément précis de tab&#10;   public int getElementFromTabAt(int position)&#10;   méthode de modification d'un élément précis de tab&#10;   public void setElementFromTabAt(int position, int value)&#10;   public int [] getTabUser()&#10;   public void setTabUser(int [] tabUser)&#10;   méthode de recupération d'un élément précis de tabUser&#10;   public int getElementFromTabUserAt(int position)&#10;   méthode de modification d'un élément précis de tabUser&#10;   public void setElementFromTabUserAt(int position, int value)&#10;   public int getTabLength()&#10;   public void setTabLength(int tabLength)&#10;   public boolean isComparaison()&#10;   public void setcomparaison(boolean comparaison)&#10;   public int getNumberOfTries()&#10;   public void setNumberOfTries(int numberOfTries)&#10;   public int getRandomMax()&#10;   public void setRandomMax(int randomMax)&#10;   public int getRandomMin()&#10;   public void setRandomMin(int randomMin)&#10;   public boolean isUserSucces() &#10;   public void setUserSucces(boolean userSucces) &#10;   public boolean isComputerSucess() &#10;   public void setComputerSucess(boolean computerSucess) &#10;&#10;MoreOrLessGame :&#10;constructeur : &#10;    public MoreOrLessGame() &#10;méthodes Override&#10;    public GameMode defender()&#10;    public GameMode duel() &#10;    public void tipsGestion ()&#10;    public GameMode challenger()&#10;méthodes&#10;    public boolean defenderModeComparaisonManager &#10;    public void userTips()&#10;    private void combinationAndTipsGestion&lt;+&#10;attributs&#10;   private boolean comparaison &#10;   private int computerTab[] &#10;   private SolverHelper tabSolverHelper[]&#10;   private String userResponse[]&#10;   private String goodResponseComparaisonTab[]&#10;   private int computerTabLength&#10;   private final static Logger logger = Logger.getLogger(MoreOrLessGame.class.getName()); &#10;        &#10;MasterMindGame&#10;constructeur : &#10;    public MastermindGame()&#10;override : &#10;    public GameMode challenger() &#10;    public void tipsGestion()&#10;    public GameMode defender() &#10;    public GameMode duel() : vide&#10;méthodes :&#10;     private void combinationAndTipsGestion()&lt;+&#10;     public void userTipsMastermind() &#10;     public boolean defenderModeComparaisonManagerMastermind()  &#10;     userCombinationMasterMindDefender()&#10;     public void combinationNumberOfNumbers()&#10;     private void secretGestion()&#10;     private int[] initTab()&#10;     private boolean isFinished(int[] tab)&#10;     private void roundGestion()&lt;+&#10;     private void increment(int[] tab)&#10;     private void solve(int[] tabSol)&#10;     private void filterList(int i)&#10;     private List&lt;Integer&gt; extractIngerList(int[] saveProp)&#10;     private void userFeedBack()&#10;     private void extractWhenSimilarPoint(int[] tab)&#10;     private void extractPair(List&lt;Integer&gt; list1)&#10;     private void extractTrio(List&lt;Integer&gt; list1)&#10;     private void extractQuatuor(List&lt;Integer&gt; list1)&#10;     private void extractQuinte(List&lt;Integer&gt; list1)&#10;     private void extractSixte(List&lt;Integer&gt; list1)&#10;     private void extractSeptuor(List&lt;Integer&gt; list1)&#10;     private void extractOctuor(List&lt;Integer&gt; list1)&#10;     private void extractNonet(List&lt;Integer&gt; list1)&#10;     private void filterList(int[] tab)&#10;     private int[] copySol(int[] tab)&#10;     private void printFirst(int[] ints)&#10;     private int countWellPlaced(int[] tab, int[] save)&#10;     private int countMissPlaced(int[] tab, int[] save)&#10;     private boolean defenderModeComparaisonManagerMastermind()&#10;     private boolean roundCounting()&#10; attributs&#10;    private int number;&#10;    private boolean comparaison;&#10;    private int computerTabLength; &#10;    private int numberOfTries;&#10;    private int roundCounter; &#10;    private int maxNumberOfNumbers; &#10;    private List&lt;int[]&gt; list = new ArrayList&lt;&gt;();&#10;    private List&lt;List&lt;Integer&gt;&gt; listOfList = new ArrayList&lt;&gt;()&#10;    private int[] solution;&#10;    private int listSize;&#10;    private int numberOfWritePlaced; &#10;    private int numberOfPresentNumbers; &#10;    private int sumWellPlacedAndMissPlaced;&lt;+&#10;    private int[] saveProp;&lt;+&#10;    private boolean roundCountingBoolean;&#10;    private final static Logger logger = Logger.getLogger(MastermindGame.class.getName()); &#10;&#10;&#10; &#10;GameGetPropertyValues &#10;méthodes&#10;    public GameProperties getPropValues() throws IOException &#10;attributs&#10;String result&#10;InpuStream inputStream&#10;&#10;GameProperties &#10;constructeur&#10;    public GameProperties()&#10;attributs&#10;    private int numbersOfTries&#10;    private int difficulty&#10;    private int gameLength&#10;    private boolean devMode&#10;setters/getters&#10;    public int getNumbersOfTries()&#10;    public void setNumbersOfTries(int numbersOfTries)&#10;    public int getDifficulty()&#10;    public void setDifficulty(int difficulty)&#10;    public int getGameLength()&#10;    public void setGameLenght(int gameLength)&#10;&#10;SolverHelper &#10;constructeur&#10;    public SolverHelper()&#10;attributs&#10;    private int max&#10;    private int min&#10;    private int lastTry&#10;méthodes&#10;    public int guessNumber()&#10;    public void analyse(String s)&#10;&#10;SolverHelperMastermind&lt;-&#10;&#10;        &#10;       &#10;Main avec test de game.runGame()" />
    <MESSAGE value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionnel&#10;COMMENTAIRES &#10;Améliorations multiples  : Ajout d'une méthode qui gère en partie les tentatives de tricherie dans le jeu du +-&#10;Problèmes d'affichage des log + message de warning résolu &#10;+ optimisation en cours&#10;+ Mise en forme" />
    <option name="LAST_COMMIT_MESSAGE" value="ETAT DU PROGRAMME :&#10;Challenger du + ou -. =&gt; fonctionnel&#10;Challenger du MastermindMind =&gt; fonctionnel&#10;Défenseur du + ou - =&gt; fonctionnel&#10;Défenseur du MastermindMind =&gt; fonctionnel &lt;+ le nombre d'essai est fonctionnel REMARQUE pour les besoins du test on est encore en mode automatique, mais le retour utilisateur fonctionne &#10;Duel +- =&gt; fonctionnel : Amelio des messages de fin &#10;Duel Mastermind fonctionnel&#10;COMMENTAIRES &#10;Améliorations multiples  : Ajout d'une méthode qui gère en partie les tentatives de tricherie dans le jeu du +-&#10;Problèmes d'affichage des log + message de warning résolu &#10;+ optimisation en cours&#10;+ Mise en forme" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/GameGetPropertyValues.java</url>
          <line>49</line>
          <properties />
          <option name="timeStamp" value="177" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="Application">
        <watch expression="((MastermindGame)this).tabUser" custom="com.Mastermind.MastermindGame" />
        <watch expression="tab" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/GameManager.java" />
    <entry file="file://$PROJECT_DIR$/src/main.java" />
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/java.base/java/lang/Override.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="493">
          <caret line="52" column="18" selection-start-line="52" selection-start-column="18" selection-end-line="52" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/Combination.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/Game.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/UserCombination.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/RandomCombination.java" />
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/java.base/java/lang/Object.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="191">
          <caret line="244" column="18" selection-start-line="244" selection-start-column="18" selection-end-line="244" selection-end-column="18" />
          <folding>
            <element signature="e#10225#10226#0" expanded="true" />
            <element signature="e#10308#10309#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/listes.txt" />
    <entry file="file://$PROJECT_DIR$/pom.xml" />
    <entry file="file://$PROJECT_DIR$/src/main/java/mastermind/Main.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/ListOfSolutionsMastermind.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/ListOfListOfSolutionsMastermind.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/ResultMastermindDefender.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/SolverHelperMastermind.java" />
    <entry file="file://$PROJECT_DIR$/src/main/java/TryMastermindDefender.java" />
    <entry file="file://$PROJECT_DIR$/apache-log4j-2.11.2-src/pom.xml" />
    <entry file="file://$PROJECT_DIR$/apache-log4j-2.11.2-src/log4j-core/src/test/resources/LOG4J-2195/log4j2.xml" />
    <entry file="file://$PROJECT_DIR$/apache-log4j-2.11.2-src/log4j-core/src/test/resources/LOG4J2-1100/log4j2.xml" />
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/jdk.xml.dom/module-info.java">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <folding>
            <element signature="e#0#546#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/jdk.xml.ws/module-info.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-192">
          <folding>
            <element signature="e#0#1075#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/jdk.xml.bind/com/sun/xml/internal/dtdparser/XmlReader.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-3043">
          <caret line="65" column="12" selection-start-line="65" selection-start-column="12" selection-end-line="65" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/.IdeaIC2019.1/system/log/idea.log">
      <provider selected="true" editor-type-id="LogFileEditorProvider">
        <state relative-caret-position="-5759">
          <caret line="3234" column="112" lean-forward="true" selection-start-line="3234" selection-start-column="112" selection-end-line="3234" selection-end-column="112" />
        </state>
      </provider>
      <provider editor-type-id="text-editor">
        <state relative-caret-position="-4080" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/out/production/Mastermind/log4j2.xml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="204">
          <caret line="12" column="48" lean-forward="true" selection-start-line="12" selection-start-column="48" selection-end-line="12" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/java.base/java/util/Random.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="197">
          <caret line="387" column="18" selection-start-line="387" selection-start-column="18" selection-end-line="387" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/java.base/java/lang/Integer.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="197">
          <caret line="768" column="22" selection-start-line="768" selection-start-column="22" selection-end-line="768" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/liste.txt">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/resources/log4j2.xml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="289">
          <caret line="17" column="27" lean-forward="true" selection-start-line="17" selection-start-column="27" selection-end-line="17" selection-end-column="27" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/GameGetPropertyValues.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1139">
          <caret line="67" column="25" lean-forward="true" selection-start-line="67" selection-start-column="25" selection-end-line="67" selection-end-column="25" />
          <folding>
            <element signature="imports" expanded="true" />
            <element signature="e#2903#2904#0" expanded="true" />
            <element signature="e#2936#2937#0" expanded="true" />
            <element signature="e#2970#2971#0" expanded="true" />
            <element signature="e#3000#3001#0" expanded="true" />
            <element signature="e#3038#3039#0" expanded="true" />
            <element signature="e#3074#3075#0" expanded="true" />
            <element signature="e#3108#3109#0" expanded="true" />
            <element signature="e#3141#3142#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/GameProperties.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="357">
          <caret line="21" selection-start-line="21" selection-end-line="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/Main.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="85">
          <caret line="5" column="23" selection-start-line="5" selection-start-column="23" selection-end-line="5" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files (x86)/Java/jdk-10.0.2/lib/src.zip!/java.base/java/util/List.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="197">
          <caret line="571" column="6" selection-start-line="571" selection-start-column="6" selection-end-line="571" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/MoreOrLessGame.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-161">
          <caret line="155" column="48" selection-start-line="155" selection-start-column="48" selection-end-line="155" selection-end-column="48" />
          <folding>
            <element signature="imports" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/resources/config.properties">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="7" column="11" selection-start-line="7" selection-start-column="11" selection-end-line="7" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/SolverHelper.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="238">
          <caret line="14" column="46" selection-start-line="14" selection-start-column="46" selection-end-line="14" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/GameMode.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="127">
          <caret line="207" column="20" selection-start-line="207" selection-start-column="20" selection-end-line="207" selection-end-column="20" />
          <folding>
            <element signature="imports" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/MastermindGame.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="221">
          <caret line="184" column="60" selection-start-line="184" selection-start-column="60" selection-end-line="184" selection-end-column="60" />
          <folding>
            <element signature="imports" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/main/java/GameManager.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="306">
          <caret line="30" column="93" lean-forward="true" selection-start-line="30" selection-start-column="93" selection-end-line="30" selection-end-column="93" />
          <folding>
            <element signature="imports" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>10</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>Mastermind</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>10</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>apache-log4j-2.11</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>